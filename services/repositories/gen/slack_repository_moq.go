// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gen

import (
	"github.com/ase-lab-space/ase-lab-backend/services/repositories"
	"sync"
)

// Ensure, that ISlackRepositoryMock does implement repositories.ISlackRepository.
// If this is not the case, regenerate this file with moq.
var _ repositories.ISlackRepository = &ISlackRepositoryMock{}

// ISlackRepositoryMock is a mock implementation of repositories.ISlackRepository.
//
//	func TestSomethingThatUsesISlackRepository(t *testing.T) {
//
//		// make and configure a mocked repositories.ISlackRepository
//		mockedISlackRepository := &ISlackRepositoryMock{
//			SendMessageFunc: func(channel repositories.Channel, body string) error {
//				panic("mock out the SendMessage method")
//			},
//		}
//
//		// use mockedISlackRepository in code that requires repositories.ISlackRepository
//		// and then make assertions.
//
//	}
type ISlackRepositoryMock struct {
	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(channel repositories.Channel, body string) error

	// calls tracks calls to the methods.
	calls struct {
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Channel is the channel argument value.
			Channel repositories.Channel
			// Body is the body argument value.
			Body string
		}
	}
	lockSendMessage sync.RWMutex
}

// SendMessage calls SendMessageFunc.
func (mock *ISlackRepositoryMock) SendMessage(channel repositories.Channel, body string) error {
	if mock.SendMessageFunc == nil {
		panic("ISlackRepositoryMock.SendMessageFunc: method is nil but ISlackRepository.SendMessage was just called")
	}
	callInfo := struct {
		Channel repositories.Channel
		Body    string
	}{
		Channel: channel,
		Body:    body,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	return mock.SendMessageFunc(channel, body)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//
//	len(mockedISlackRepository.SendMessageCalls())
func (mock *ISlackRepositoryMock) SendMessageCalls() []struct {
	Channel repositories.Channel
	Body    string
} {
	var calls []struct {
		Channel repositories.Channel
		Body    string
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}
