// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gen

import (
	"github.com/ase-lab-space/ase-lab-backend/repositories"
	"github.com/slack-go/slack"
	"sync"
)

// Ensure, that ISlackClientMock does implement repositories.ISlackClient.
// If this is not the case, regenerate this file with moq.
var _ repositories.ISlackClient = &ISlackClientMock{}

// ISlackClientMock is a mock implementation of repositories.ISlackClient.
//
//	func TestSomethingThatUsesISlackClient(t *testing.T) {
//
//		// make and configure a mocked repositories.ISlackClient
//		mockedISlackClient := &ISlackClientMock{
//			PostMessageFunc: func(s string, msgOptions ...slack.MsgOption) (string, string, error) {
//				panic("mock out the PostMessage method")
//			},
//		}
//
//		// use mockedISlackClient in code that requires repositories.ISlackClient
//		// and then make assertions.
//
//	}
type ISlackClientMock struct {
	// PostMessageFunc mocks the PostMessage method.
	PostMessageFunc func(s string, msgOptions ...slack.MsgOption) (string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// PostMessage holds details about calls to the PostMessage method.
		PostMessage []struct {
			// S is the s argument value.
			S string
			// MsgOptions is the msgOptions argument value.
			MsgOptions []slack.MsgOption
		}
	}
	lockPostMessage sync.RWMutex
}

// PostMessage calls PostMessageFunc.
func (mock *ISlackClientMock) PostMessage(s string, msgOptions ...slack.MsgOption) (string, string, error) {
	if mock.PostMessageFunc == nil {
		panic("ISlackClientMock.PostMessageFunc: method is nil but ISlackClient.PostMessage was just called")
	}
	callInfo := struct {
		S          string
		MsgOptions []slack.MsgOption
	}{
		S:          s,
		MsgOptions: msgOptions,
	}
	mock.lockPostMessage.Lock()
	mock.calls.PostMessage = append(mock.calls.PostMessage, callInfo)
	mock.lockPostMessage.Unlock()
	return mock.PostMessageFunc(s, msgOptions...)
}

// PostMessageCalls gets all the calls that were made to PostMessage.
// Check the length with:
//
//	len(mockedISlackClient.PostMessageCalls())
func (mock *ISlackClientMock) PostMessageCalls() []struct {
	S          string
	MsgOptions []slack.MsgOption
} {
	var calls []struct {
		S          string
		MsgOptions []slack.MsgOption
	}
	mock.lockPostMessage.RLock()
	calls = mock.calls.PostMessage
	mock.lockPostMessage.RUnlock()
	return calls
}
